SOURCE CODE WITH GIT - MAIN NOTES
================================================================================================================================================
RHEL INSTALL: Yum install git | git --version | which git [Confirm if its installed] | dnf install git [Install on Fedora distros]
DEBIAN INSTALL: apt-get install git | git --version	

UNDERSTANING GIT FILE SYSTEM
================================================================================================================================================
When edited, the files move to the master branch or other existent branches
.git directory = Configuration file and all information to track files. 
git add = Add files to the staging area.
# GIT Repository listing
	- HEAD(txt): Current branch information that we are working on
	- Config: Repository configuration file
	- Description file: Name of the repository
	- Hooks: Scripts mostly used for automation
	- Index: Tracks items within the index area ready to commit
	- Info: Items that git will ignore
	- Logs: Repository activity log files
	- Objects: DB compressed files that have been commited [represented by hash version]
	- Refs: Reference files/folders tags for branches and repository tags

CREATE LOCAL REPO
================================================================================================================================================
git init new_repository > New_repository/.git  
git init --bare large_project.git | git bare
	- Start a bare repository for larger projects(no working area). Root files will be on the [/repo] instead of [.git/].
	- This type is mainly for projects that have branches for projects that are coming from different individuals/teams.

 GIT CONFIG [.gitconfig file]
================================================================================================================================================
git config > command to configure elements on the git environment
git config --global user.name "Username" > Set identif. on ALL projects | --global user.email "email" | --global core.editor "/usr/bin/vim"
git config --list > View configuration information for the git environment 
- WHen adding 2 user.email(s), git will use the last of the document as reference [git config --list] 

ADD FILES TO PROJECT
================================================================================================================================================
git add > Add files to project [index file] to be tracked in the staging area. | git status > Check files on the staging area[not commited yet]
git rm > removes file from a project | git rm -f file.txt > Removes from staging area and directory
- Empty folders dont display on git status, only files, but will display when path is added[touch folder/.keep | git add folder/.keep]

PROJECT STATUS
================================================================================================================================================
git status -s > Short version(files added)
status -v > Verbose(inc.file changes) 
??=File not tracked | A=Added | M=Unstaged[modifiled]

GIT COMMIT
================================================================================================================================================
git commit > Opens txt editor to prep for file commit into staging area. | Commit msg are recorded: cat .git/COMMIT_EDITINGMSG
git log > Local commit[hash value] | 2 first values = ./git/objects/00/ folder_number.
git rm --cache file.txt > Remove from Index but keeps on local directory. GIT DB requires update by other commit message.
git commit -a -m "msg" > Commit modified file to staging area 

IGNORE SOME FILE TYPES
================================================================================================================================================
.git/info/exclude: File containing file patterns that git will not track.
.gitignore > Ignore local files to git repository | touch /gitignore | <add,commit> | echo "folder2 exclude/'star'" >> .gitignore
git check -ignore <pattern> > Debug gitignore to check what files are/not excluded.
VIM backups end with a ~ | ignore it: echo 'star'>~ >> .gitignore | need to still commit those changes

TAGS
================================================================================================================================================
Tags mark specific commits in a project. 
git tag -a tag_name -m "message" > Annotated tag[prefered], view detail show tag name and use for automation.
git tag tag_name -m "msg" > Lightweight tag[Private or temporary label]
git tag > View all repository tags 
git tag -d tag_name > Delete a specific tag

BRANCHES
================================================================================================================================================
git branch branch_name > Create new project branch
git checkout branch_name > Branch switch
HEAD > Current working branch pointer. We can use git status/git log to check which branch HEAD is pointing to.
- Example: git branch dev_branch | git status = Master branch | git brach checkout dev_branch

MERGING BRANCHES
================================================================================================================================================
git merge > Combines last commit from two branches into one.
git branch -d branch_name > Delete specific branch
cat .git/HEAD > Check what was the last brach that we worked
cat .git/refs/heads/master -> Hash of the last commit
git log --oneline > Compare
- Example: git merge dev_branch = Merge to master branch
- FastFoward: dev_branch commit was further along timeline of master last commit.

REBASING(ALTERNATIVE TO MERGING)
============================================================================================================================================
git release branch_name > Replay changes made to one branch over the top of other branch
Merging=Combines differences between branches into new one | Rebasing=Appends changes from one branch to other branch(useful for remote repos)
Merge: Gives more detailed history info.

REVERT A COMMIT
============================================================================================================================================
git revert <commit> > Revers commit in a project
git revert HEAD > Create new commit to remove the last one.
git log --readonline | git revert HEAD<tilda>2 > This reverts the 2nd commit from the git log

DIIF COMMAND
============================================================================================================================================
git diff > VIew diffences between 2 commits, files, blogs or bertween the working tree [Staging area]
git diff [nr commit-last] [nr commit-recent]
git diff --summary [nr commit-last] [nr commit-recent]

HOW GARBAGE COLLECTIONS WORK
============================================================================================================================================
git gc > Git garbage collection, cleans old objects that cannot be referenced by the DB anymore and compress content within .git directory.
git gc --prune > By default, cleans out objects that are older than 2 weeks. | gt cg --auto > If needs to be clean, otherwise no action taken
git config gc.pruneexpire "30 days" > Will run the garbage collection automatically every 30 days.

GIT LOGS
============================================================================================================================================
git log > View git repository history | git log --since="4 days" > show logs from the last 4 days. | git log -10 [last 10 commits in a repo]
git log --graph > Show textula graph of project commit history
git log --stat > Stattistics of the files with each commit | git log --short | 
git log --pretty=format: > Format output of git log command to display specific fields
git log --pretty=format:"%h - %an - %ar -%s" | h(hash) || an(author name) || ar(author relative time) || s(subject line)
git log -S keyword > Returns list where there was a commit that had the keyword involved.
git log --pretty=oneline --abbrev-commit > Displays per line the history of commits to the repository.

CLONE REPOSITORIES
============================================================================================================================================
git clone <local_repo> <new_repo> > Clones local repository to a new one on the local file system.
git clone <remote_repo_url> > Clones a remote git repository to the local file system
ssh-keygen > Generate specific key to authentica the cloud_user account with GitHub
Files can be viewed: cat .ssh/id_rsa.pub
Clone local repo: mkdir repo | cd repo | git clone --local /mnt/baserepo . <- the . prevents that new subdir is not created

TRACKING REMOTE REPOSITORIES
============================================================================================================================================
git remote -v > Shows remote servers that are being tracked for the current repository and their last stats.
git fetch > Fetch new commit info down from remote server for the current repository - does not commit anything to the local database



GITLAB
============================================================================================================================================
Allows local hosting, web-interface to manage repositories and user/group access. Install on server / deploy as container.
Components: git, NGINX(webserver), PostgreeSQL(backend DB), Chef(server configuration management), Redit(in-memory DB), others

Install: Follow the instructions within the official website [www.gitlabl.com]






QUIZ
================================================================================================================================================
<ONE: If a system global config variable [user.name] is already set on local system, info is under ~/.gitconfig [not ./.gitconfig]>
<TWO: git commit -m - Will commit staged files and apply comments.>
<THREE Create new branch from point lcal repo - create and swithc to branch: git checkout -b branch_name>
<FOUR User password is never captured during any git event>
<FIVE Protocols to clone a project from a remote repository is HTTPS and GIT://>

DOWNLOAD/INSTALL/CONFIG FOR LOCAL  (Requires Linux)


NEXT STEPS
================================================================================================================================================
Courses on DevOps line/paths | Jenkings | Containers | 

================================================================================================================================================

TEST

- Read the man page for git commit -a | Test this further on how it works
- Review folders and their functionality
- Git add all files within a folder instead of single ones
- Test the file backups that end with ~
